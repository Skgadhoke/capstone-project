#BlueJ class context
comment0.params=str
comment0.target=Polyinomial(java.lang.String)
comment1.params=
comment1.target=Polyinomial()
comment10.params=tList
comment10.target=java.lang.String\ generateEQ(java.util.ArrayList)
comment10.text=\ \r\ngenerateEQ()\r\nreturn\ type\:\ String\r\nparam\:\ ArrayList<Terms>\ tList\r\ntakes\ in\ a\ list\ of\ terms\ of\ the\ equation\ and\ returns\ a\ string\ in\ equation\ form.\r\n
comment11.params=
comment11.target=java.util.ArrayList\ vertices()
comment12.params=
comment12.target=double\ yIntercept()
comment12.text=\ \r\nyIntercept()\r\nreturn\ type\:\ double\r\nparam\:\ none\r\npre-condition\:\ assumed\ that\ polynomial\ is\ a\ function\ and\ not\ and\ trig/log\ functions\r\nif\ degree\ 0\ exists\ then\ returns\ the\ constant\ else\ y-intercept\ occurs\ at\ 0\ \r\n
comment13.params=startVal\ finalVal
comment13.target=double[]\ setInterval(double,\ double)
comment13.text=\ \r\nsetInterval()\r\nreturn\ type\:\ double[]\r\nparam\:\ double\ startVal,\ double\ finalVal\r\nuser\ can\ alter\ the\ range\ of\ x\ values\r\ndefault\ range\ of\ x\ values\:\ [-10,10]\r\n
comment14.params=
comment14.target=java.util.ArrayList\ factors()
comment14.text=\ \r\nfactors()\r\nreturn\ type\:\ ArrayList\r\nparam\:\ none\r\nfind\ the\ lowest\ degrees\ coeff,\ which\ is\ the\ constant\r\nfinds\ the\ factors\ of\ the\ constant\ and\ \r\n
comment15.params=
comment15.target=java.util.ArrayList\ possibleRoots()
comment15.text=\ \r\npossibleRoots()\r\nreturn\ type\:\ ArrayList\r\nparam\:\ none\r\nfinds\ the\ possible\ roots,\ by\ adding\ the\ factors\ of\ the\ constant\r\nand\ coeff/constant\ \r\n
comment16.params=
comment16.target=void\ sortTerms()
comment16.text=\r\nsortTerms()\r\nreturn\ type\:\ void\r\nparam\:\ none\r\nsorts\ the\ terms\ in\ List\ from\ high\ degree\ to\ lowest\ degree.\r\n\r\n
comment17.params=cStr\ cDeg
comment17.target=void\ createTerm(java.lang.String,\ java.lang.String)
comment17.text=\ \r\ncreateTerm()\r\nreturn\ type\:\ void\r\nparam\:\ String\ cStr,\ String\ cDeg\r\ncreates\ term\ object\ using\ the\ numbers\ passed\ as\ Strings\ and\ add\ it\ to\ the\ ArrayList\r\n\ \r\n
comment18.params=
comment18.target=void\ parsePolynimalEquation()
comment18.text=\ \r\nparsePolynimalEquation()\r\nreturn\ type\:\ void\r\nparam\:\ none\r\nparses\ the\ String\ and\ creates\ terms.\r\nUses\ StringTokenizer\ java\ API\ to\ parse\ the\ equation.\ creates\ token\ using\ tokenizer\r\nas\ "-+^x",\ assumes\ equation\ is\ function\ is\ "x"\r\n
comment2.params=
comment2.target=java.lang.String\ enterEq()
comment2.text=\ \r\nenterEq\r\nreturn\ type\:\ String\r\nparam\:\ none\r\nallows\ the\ user\ to\ enter\ in\ the\ equation\ \ \r\n
comment3.params=t
comment3.target=void\ addTerms(Terms)
comment3.text=\ \r\naddTerms\r\nreturn\ type\:\ void\r\nparam\:\ Terms\ t\r\nthis\ takes\ the\ terms\ from\ the\ termsList\r\nif\ degree\ doesn't\ exists\ then\ adds\ the\ new\ term\r\nelse\ it\ just\ updates\ the\ coefficient\ of\ the\ existing\ term\ by\ adding\ the\ coeff\ of\r\nexisting\ term\ and\ new\ term\ t.\r\n
comment4.params=
comment4.target=java.lang.String\ deriv()
comment4.text=\ \r\nderiv\r\nreturn\ type\:\ String\r\nparam\:\ none\r\ncalculates\ the\ derivative\ value\ using\ the\ terms\ of\ equation\ stored\ in\ ArrayList\r\n
comment5.params=
comment5.target=java.util.ArrayList\ quadraticRoots()
comment5.text=\ \r\nquadraticRoots()\r\nreturn\ type\:\ ArrayList\r\nfinds\ the\ roots\ quadratic\ equations\ by\ applying\ formula\ -b+Math.sqrt(b*b-4*a*c))/(2*a));\ \r\n
comment6.params=
comment6.target=java.util.ArrayList\ linearRoots()
comment6.text=\ \r\nlinearRoots()\r\nreturn\ type\:\ ArrayList\r\nparam\:\ none\r\nfinds\ the\ roots\ quadratic\ equations\ \r\n
comment7.params=
comment7.target=java.util.ArrayList\ longDiv()
comment7.text=\ \r\nlongDiv()\r\nreturn\ type\:\ ArrayList\r\nparam\:\ none\r\nuses\ long\ div\ to\ find\ the\ possible\ roots\ (synthetic\ div)\ for\ degrees\ higher\ than\ 2\r\n
comment8.params=
comment8.target=java.util.ArrayList\ roots()
comment8.text=\ \r\nroots()\r\nreturn\ type\:\ ArrayList\r\nparam\:\ none\r\nfinds\ all\ the\ roots\ for\ any\ positive\ degree\ function\r\n
comment9.params=
comment9.target=java.lang.String\ generateEQ()
comment9.text=\ \r\ngenerateEQ()\r\nreturn\ type\:\ String\r\ntakes\ in\ a\ list\ of\ terms\ of\ the\ equation\ and\ returns\ a\ string\ in\ equation\ form.\r\n
numComments=19
